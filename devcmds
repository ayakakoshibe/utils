
# added by envsetup #

JPATH=/usr/share/floodlight/java


pkgpatch () {
    if [ "$1" = "-h" ]; then
        printf '%s\n' 'patchjar' \
               '' \
               'Adds files in imports/ to src/, overwriting existing ones.'
               'Needs an import/PLIST as created by importgen'
        return
    fi

    local c
    local p
    local org

    while read l; do
        c=${l##*/}
        p=${l%$c}
        [ -e "$l" ] && org="$(md5sum $l)"
        if [ "$c" -a "$p" ]; then
            [ "$p" -a ! -d $p ] && sudo mkdir -p $p
            sudo cp ./imports/$c $p
        fi
        if [ "$org" ]; then
            printf 'replaced file:\n\t%s %s\n\t%s %s\n' $org "$(md5sum $l)" && \
            unset org
        else
            printf '%s\n' "added file: $l"
        fi
    done < ./imports/PLIST
}

pkgextract () {
    if [ "$1" = "-h" ]; then
        printf '%s\n' 'extracts imported bundle in ./imports/ for patching'
    fi

    [ ! -d "imports" -o ! -d "jar" -o ! -d "src" ] && \
        printf 'Not in a jar directory\n' && \
        return

    tar -xzf ./imports/*.tgz -C ./imports/
    [ "$1" = "patch" ] && pkgpatch
}

pkginstall () {
    if [ "$1" = "-h" ]; then
        printf '%s\n' 'installs jarfile for use'
        return
    fi

    sudo cp *.jar $JPATH
}

pkgjar () {
    if [ "$1" = "-h" ]; then
        printf '%s\n' 'creates a jarfile from ./src/'
        return
    fi

    [ ! -e "./src/META-INF" ] && printf 'Not in a jar directory\n' && return

    . INFO
    cd ./src
    jar cvmf META-INF/MANIFEST.MF ../$PKGNAME *
    cd -
    unset PKGNAME
    [ "$1" = "install" ] && pkginstall
}

pkgclean () {
    if [ "$1" = "-h" ]; then
        printf '%s\n' 'pkgclean [all]' \
                      '' \
                      "Clears src/. 'all' also wipes imports/."
    fi

    [ ! -d "imports" -o ! -d "jar" -o ! -d "src" ] && \
        printf 'Not in a jar directory\n' && \
        return

    if [ ! "$1" -o "$1" = "all" ]; then
        rm -rf src/* 2>/dev/null
        cd src/
        jar -xf ../jar/*.jar
        cd - 1>/dev/null
    fi
    if [ "$1" = "all" ]; then
        rm imports/* ./*.jar 2>/dev/null
    fi
}

importgen() {
    if [ "$1" = "-h" ]; then
        printf '%s\n' 'importgen <relative commit>' \
                      '' \
                      'e.g: importgen HEAD~2' \
                      'relative commit defaults to HEAD.'
        return
    fi

    local d
    local c
    local xd

    d=$(pwd)
    d=${d##*/}
    [ ! -d "../$d/target" ] && \
        printf "Not a package, or one that hasn't been compiled\n" && \
        return

    c=${1:-HEAD}
    xd=/tmp/export/$d
    mkdir -p $xd
    for f in $(git diff --name-only $c --relative); do
        fn=${f##*/}     #filename
        td=${f%$fn}     #file directory
        td=${td##*main/java/}
        sn=${fn##*.}    #file suffix
        case $sn in
            java)
                bn=$(printf '%s\n' $fn | sed 's:\(.*\)\..*:\1:')
                for t in $(find ./target/classes/$td -name $bn*class); do
                    cp $t $xd
                    printf './src/%s\n' ${t##./target/classes/} >> $xd/PLIST
                done
                ;;
            py)
                cp $f $xd
                printf '/usr/share/floodlight/%s\n' ${f##*main/python/} >> $xd/PLIST
                ;;
            yang|manifest|properties)
                cp $f $xd
                printf './src/%s\n' ${f##*main/resources/} >> $xd/PLIST
                ;;
        esac
    done
    cd $xd
    tar -czf ../$d.tgz *
    cd -
    printf "$d.tgz in /tmp/export\n"
}

importsend() {
    [ ! "$cvmls" ] && printf 'Destinations not set, export a '"'cvmls'\n" && return
    u=${1:-admin}
    cd /tmp/export
    for i in $cvmls; do
        scp *.tgz $u@$i:/tmp/pkg/
    done
    cd -
}

export rsc=`sudo cat /var/lib/floodlight/recovery/recovery.json | sed -n 's| *"cookie" : "\(.*\)",|\1| p'`
export fsc=$FL_SESSION_COOKIE

alias doas=sudo
alias -- -='cd -'
alias ...='cd ../../'
alias ..='cd ../'

alias fcli="floodlight-cli -Xm internal"
alias mnt2="sudo mount /dev/flvg/root2 /mnt"
